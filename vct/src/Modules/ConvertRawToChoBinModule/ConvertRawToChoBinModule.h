//////////////////////////////////////////////////////////////////
//                Simulation                                    //
//                VCT: Virtual Clinical Trials                  //
//////////////////////////////////////////////////////////////////

/*!
 * \file ConvertRawToChoBinModule.h
 * \brief Implementation of class ConvertRawToChoBinModule
 * \date 1-Sept-2010
 * (C) Copyright 2014 Barco NV and others.
 *
 * This software code is licensed to you under the Barco VCT Research License. The text of this license
 * is found in the file License.TXT which is available in the same repository, in absence of which you need
 * to contact Barco first before you are allowed to engage in any act of familiarization or use of whatever
 * kind. Any familiarization or use of whatever kind of this software implies acceptance of the pre-mentioned
 * license. You warrant that the modifications you make are “original” and are able to be subject to the provisions
 * of the pre-mentioned license. Any contribution containing “non-original” modification require the prior written
 * approval from Barco.
 *
 */

#ifndef CONVERTRAWTOCHOBINMODULE_H
#define CONVERTRAWTOCHOBINMODULE_H

#include <boost/optional/optional.hpp> // Because the class has optional members

#include <Module.h> // All VCT modules inherits the Module Abstract class

// IMPORTANT: do not put "using namespace" statements in header files, it can lead to compilation problems

/**
 * This module is used to calculate the histogram of the latest component
 * It also is the model to follow when one wants to implement a new VCT module
 */
class ConvertRawToChoBinModule : public Module // All VCT modules inherits the Module Abstract class
{
public:
	/**
	 * Constructor, no parameters
	 */
	ConvertRawToChoBinModule();

	/**
	 * Destructor, no parameters
	 */
	~ConvertRawToChoBinModule();

	/**
	 * Used by the automated run processes to perform the actual histogram calculation
	 * @param container Vector containing the list of containers generated by the previous modules
	 */
	void Simulate(std::vector<DSContainer*>& container);

	/**
	 * method SetParameter
	 * Method allowing to set the value of a class parameter
	 * @param name:  name of the parameter
	 * @param value: value of the parameter, string type
	 * @return void
	 */
	void SetParameter(const std::string & name, const std::string & value );

private:
	std::string m_inputFolder;
	std::string m_outputFolder;
	boost::optional<unsigned> m_nRows;
	boost::optional<unsigned> m_nColumns;
	boost::optional<unsigned> m_nSlices;
};

#endif //CONVERTRAWTOCHOBINMODULE_H

