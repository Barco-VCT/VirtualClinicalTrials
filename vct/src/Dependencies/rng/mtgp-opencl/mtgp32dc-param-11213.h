// mtgp32dc-param-11213.h
#if (defined(_MSC_VER) /*&& (_MSC_VER <= 1400) GUSP comment: now we work with VS 2008*/)
#if !defined(RANDOMC_H)
#include <boost/cstdint.hpp>
using boost::uint32_t;
#endif
#else
#include <stdint.h>
#endif

// Originally in mtgp32-fast.h, but compile all .c files separately.

#ifndef UINT32_C
#define UINT32_C uint32_t
#endif

/**
 * \struct MTGP32_PARAMS_FAST_T
 * MTGP32 parameters.
 * Some element is redundant to keep structure simple.
 *
 * \b pos is a pick up position which is selected to have good
 * performance on graphic processors.  3 < \b pos < Q, where Q is a
 * maximum number such that the size of status array - Q is a power of
 * 2.  For example, when \b mexp is 44497, size of 32-bit status array
 * is 696, and Q is 184, then \b pos is between 4 and 183. This means
 * 512 parallel calculations is allowed when \b mexp is 44497.
 *
 * \b poly_sha1 is SHA1 digest of the characteristic polynomial of
 * state transition function. SHA1 is calculated based on printing
 * form of the polynomial. This is important when we use parameters
 * generated by the dynamic creator which
 *
 * \b mask This is a mask to make the dimension of state space have
 * just Mersenne Prime. This is redundant.
 */
typedef struct MTGP32_PARAMS_FAST_T {
    int mexp;			/**< Mersenne exponent. This is redundant. */
    int pos;			/**< pick up position. */
    int sh1;			/**< shift value 1. 0 < sh1 < 32. */
    int sh2;			/**< shift value 2. 0 < sh2 < 32. */
    uint32_t tbl[16];		/**< a small matrix. */
    uint32_t tmp_tbl[16];	/**< a small matrix for tempering. */
    uint32_t flt_tmp_tbl[16];	/**< a small matrix for tempering and
				 converting to float. */
    uint32_t mask;		/**< This is a mask for state space */
    unsigned char poly_sha1[21]; /**< SHA1 digest */
} mtgp32_params_fast_t;

// Originally in mtgp32dc-param-11213.c, but compile all .c files separately.
#define MTGPDC_PARAM_TABLE mtgp32dc_params_fast_11213
extern mtgp32_params_fast_t mtgp32dc_params_fast_11213[];
extern const int mtgpdc_params_11213_num;
